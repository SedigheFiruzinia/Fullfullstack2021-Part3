{"version":3,"sources":["services/notes.js","components/Person.js","components/Notification.js","components/PersonForm.js","App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","delete","put","name","number","AllPerson","person","allPerson","setPersons","map","p","onClick","window","confirm","noteServise","then","response","filter","catch","error","alert","removePerson","Person","search","length","s","toLowerCase","x","indexOf","Notification","message","type","className","PersonForm","persons","useState","newName","setNewName","newNumber","setNewNumber","notification","setNotification","setType","onSubmit","event","preventDefault","personObj","found","concat","data","setTimeout","value","onChange","target","App","searchName","setSearchName","useEffect","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df46f90f.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst remove = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\nconst update = (newObject , id) => {\r\n  return axios.put(`${baseUrl}/${id}`, { name:newObject.name , number: newObject.number})\r\n}\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  remove: remove,\r\n  update:update\r\n}","import noteServise from '../services/notes'\r\n\r\nconst AllPerson = ({ person, allPerson, setPersons }) => {\r\n\r\n    const removePerson = (p) => {\r\n\r\n        if (window.confirm(`Delete ${p.name} ?`)) {\r\n            noteServise\r\n                .remove(p.id)\r\n                .then(response => {\r\n                    setPersons(allPerson.filter(person => person.id !== p.id))\r\n                })\r\n                .catch(error => {\r\n                    alert(`the person ${p.name} was already deleted from server`)\r\n                    \r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {person.map(p =>\r\n                <p key={p.id}> {p.name} {p.number}\r\n                    <button onClick={() => removePerson(p)}>delete</button>\r\n                </p>\r\n            )}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst Person = ({ search, person, setPersons }) => {\r\n    if (search.length === 0) {\r\n        return (\r\n            <ul>\r\n                <AllPerson person={person} allPerson={person} setPersons={setPersons}/>\r\n            </ul>\r\n        )\r\n    }\r\n    else {\r\n        let s = search.toLowerCase();\r\n        let x = person.filter(({ name }) => name.toLowerCase().indexOf(s) > -1)\r\n        return (\r\n            <ul>\r\n                <AllPerson person={x} allPerson={person} setPersons={setPersons} />\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nexport default Person","const Notification = ({ message, type }) => {\r\n\r\n    if (message === null) {\r\n        return null\r\n    } else {\r\n        \r\n        if (type === 0)\r\n            return (\r\n                <div className='notification'>\r\n                    {message}\r\n                </div>\r\n            )\r\n        if (type === 1)\r\n            return (\r\n                <div className='error'>\r\n                    {message}\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Notification","import React, { useState } from 'react'\r\nimport noteServise from '../services/notes'\r\nimport Notification from './Notification'\r\n\r\nconst PersonForm = ({ persons, setPersons }) => {\r\n\r\n    const [newName, setNewName] = useState('')\r\n    const [newNumber, setNewNumber] = useState('')\r\n    const [notification, setNotification] = useState(null)\r\n    const [type, setType] = useState(0)\r\n\r\n    const newNameHandler = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const newNumberHandler = (event) => {\r\n        setNewNumber(event.target.value)\r\n    }\r\n\r\n    const addNew = (event) => {\r\n        event.preventDefault()\r\n        const personObj = { name: newName, number: newNumber }\r\n        const found = persons.filter(p => p.name.toLowerCase() === newName.toLowerCase())\r\n\r\n        if (typeof found[0] === \"undefined\") {\r\n            noteServise\r\n                .create(personObj)\r\n                .then(response => {\r\n                    setPersons(persons.concat(response.data))\r\n                    setNewName('')\r\n                    setNewNumber('')\r\n                    setType(0)\r\n                    setNotification(`Added ${personObj.name}`)\r\n                    setTimeout(() => {\r\n                        setNotification(null)\r\n                    }, 5000)\r\n\r\n                })\r\n                .catch(error => {\r\n                    setType(1)\r\n                    setNotification(error.response.data.error)\r\n                    setTimeout(() => {\r\n                        setNotification(null)\r\n                    }, 5000)\r\n\r\n                })\r\n        } else {\r\n            if (window.confirm(`${newName} is already added to phonebook, replace the old number with the new one?`)) \r\n            {\r\n                personObj.id = found[0].id\r\n                noteServise\r\n                    .update(personObj, found[0].id)\r\n                    .then(response => {\r\n                        setPersons(persons.map(p => p.id !== found[0].id ? p : personObj))\r\n                        setNewName('')\r\n                        setNewNumber('')\r\n                        setType(0)\r\n                        setNotification(`Updated phone number for ${newName} `)\r\n                        setTimeout(() => {\r\n                            setNotification(null)\r\n                        }, 5000)\r\n                    })\r\n                    .catch(error => {\r\n                        setPersons(persons.filter(p => p.id !== personObj.id))\r\n                        setType(1)\r\n                        setNotification(error.response.data.error)\r\n                        //setNotification(`Information of ${personObj.name} has already been removed from server`)\r\n                        setNewName('')\r\n                        setNewNumber('')\r\n                        setTimeout(() => {\r\n                            setNotification(null)\r\n                        }, 5000)\r\n                    \r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={addNew}>\r\n\r\n            <Notification message={notification} type={type} />\r\n\r\n            <div>\r\n                name: <input value={newName} onChange={newNameHandler} />\r\n            </div>\r\n            <div>\r\n                number: <input value={newNumber} onChange={newNumberHandler} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\nexport default PersonForm","import React, { useState, useEffect } from 'react'\nimport Person from './components/Person'\nimport PersonForm from './components/PersonForm'\nimport noteServise from './services/notes'\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [searchName, setSearchName] = useState('')\n\n  useEffect(() => {\n    console.log('effect')\n    noteServise\n      .getAll()\n      .then(response => {\n        console.log('promise fulfilled')\n        setPersons(response.data)\n      })\n  }, [])\n  console.log('render', persons.length, 'persons')\n\n  const searchHandler = (event) => {\n    setSearchName(event.target.value)\n}\n\n  \n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <div>\n        filter shown with <input value={searchName} onChange={searchHandler} />\n      </div>\n      <h2>add a new</h2>\n      <PersonForm persons={persons} setPersons={setPersons}/>\n      <h2>Numbers</h2>\n      <Person search={searchName} person={persons} setPersons={setPersons}/>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <App />, \r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}